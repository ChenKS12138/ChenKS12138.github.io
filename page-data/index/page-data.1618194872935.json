{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"allMarkdownRemark":{"nodes":[{"id":"c110ff8c-c3e1-54f2-99a4-ec857c41479c","excerpt":"2021.04.12 最大数 https://leetcode-cn.com/problems/largest-number/","frontmatter":{"date":"2021-04-12","title":"leetcode每日一题2021.04.12-2021.04.18","tags":["leetcode"],"index_img":null}},{"id":"5312be9c-8521-5b33-99d7-43c12e25552e","excerpt":"2021.04.05 合并两个有序数组 https://leetcode-cn.com/problems/merge-sorted-array/ 2021.04.06 删除有序数组中的重复项 II https://leetcode-cn.com/problems/remove-duplicates…","frontmatter":{"date":"2021-04-05","title":"leetcode每日一题2021.04.05-2021.04.11","tags":["leetcode"],"index_img":null}},{"id":"106df96a-6301-5f14-9492-352b3762ac5d","excerpt":"2021.03.29 颠倒二进制位 https://leetcode-cn.com/problems/reverse-bits/ 2021.03.30 搜索二维矩阵 https://leetcode-cn.com/problems/search-a-2d-matrix/ 2021.03.31 子集…","frontmatter":{"date":"2021-03-29","title":"leetcode每日一题2021.03.29-2021.04.04","tags":["leetcode"],"index_img":null}},{"id":"76e24b98-08f7-53ba-addf-659bf63f571d","excerpt":"2021.03.15 螺旋矩阵 https://leetcode-cn.com/problems/spiral-matrix/ 2021.03.16 螺旋矩阵 II https://leetcode-cn.com/problems/spiral-matrix-ii/ 2021.03.17 不同的子…","frontmatter":{"date":"2021-03-27","title":"leetcode每日一题2021.03.15-2021.03.21","tags":["leetcode"],"index_img":null}},{"id":"e09c4ea9-888c-5114-95c6-fa9f1367f7bd","excerpt":"2021.03.22 位 1 的个数 https://leetcode-cn.com/problems/number-of-1-bits/ 2021.03.23 扁平化嵌套列表迭代器 https://leetcode-cn.com/problems/flatten-nested-list-iter…","frontmatter":{"date":"2021-03-26","title":"leetcode每日一题2021.03.22-2021.03.28","tags":["leetcode"],"index_img":null}},{"id":"06764d24-3040-57e0-ba49-62f6f1bfd4d3","excerpt":"CSP(Content-Security-Policy) 大纲 基本概念 目前 CSP 的使用情况 一些具体场景下 CSP 的应用 小结 基本概念 CSP 的全称是Content-Security-Policy[1] ，是一种计算机安全标准，可以防御跨站脚本、点击劫持等代码注入攻击，阻止恶意内容在…","frontmatter":{"date":"2021-03-15","title":"Conent-Security-Policy","tags":["随笔"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/e24a8ab26ba4334c9cf464fcda442a85/csp_implement_zhihu.png"}}},{"id":"0435599d-4f45-587c-9b17-a7abea0db8af","excerpt":"前言 从一开始的静态网页以及浏览器的出现，出现了文档链接其他文档这样的交互方式。后来 JavaScript 的出现了，通过在文档中编写脚本，借助浏览器的能力，文档和用户的交互有了更多的可能。再到后来 PHP、ASP 以及各种 CGI 应用的出现，CGI 应用通过自身的访问数据库、文件系统等各种能力…","frontmatter":{"date":"2021-02-12","title":"搭建一个基于同构渲染的NYR","tags":["随笔"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/bf90e13ff3ef118547fa39fd584b8e4c/isomorphic-rendering-nyr-1.jpg"}}},{"id":"2974689e-8bec-5932-99d3-3e99d7de4e5f","excerpt":"前言 从大一开始我每年都打 NCTF，除了恰烂钱，感觉每次都可以学到点不一样的东西。今年的 web 题有点不一样，感觉挺有意思的，加深了我对 JavaScript 相关的一些安全问题的理解。  JS-world  这道题涉及到的是 ejs 模板的注入问题，同时传入的后端的信息会先经过前端过滤一次。…","frontmatter":{"date":"2020-11-23","title":"NCTF2020复盘","tags":["随笔","安全"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/b7aeefecca63105e3ab88a5801086b47/profile.png"}}},{"id":"74cae60c-b765-5b90-9558-c1181bfe45f2","excerpt":"前言 HTTP 层的数据传输对于 web 开发人员来说是一个黑盒，但是平时的开发又离不开它。因此有必要去了解一下它是如何保障我们的数据可以被高效、准确地传输。 连接模型 抓包使用环境 macOS 10.15.7 Nginx 1.18.0 Chrome 86.0.4240.80 Wireshark …","frontmatter":{"date":"2020-10-23","title":"HTTP连接模型","tags":["随笔","计算机网络"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/1df0278412925ef00667f8bcbc4e66f5/http-connection1.png"}}},{"id":"aa17b588-f992-5180-aaba-654e15e73bc2","excerpt":"前言  大一上时刚学会点 php，然后自己是学习委员，作为学习委员需要经常收电子版的实验报告，从 QQ 上将实验报告一份一份下载很麻烦，为了提高效率就萌生了写一个提交作业的网站的想法。在这里我第一个使用 mysql+php+python 搭建了一个项目，现在回头看，之前写的代码确实不怎么好。没有一…","frontmatter":{"date":"2020-10-10","title":"web应用加载优化相关","tags":["随笔"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/b8e39df40e3f0ea3ecd322d88367f7ab/collect-homework-first-version.png"}}},{"id":"a3697df1-78f6-5a6a-a5b3-d50f08733cda","excerpt":"概述  软件漏洞分析课程的一次作业，利用了栈内存的缓冲区溢出，覆盖了返回地址，从而达到劫持控制流的目的。如果希望能具体了解一下图中 c 函数调用的实现，可以看一下 B 站上陈渝教授的这个视频。 EXP1 使用gdb进行调试，strcpy函数可以被利用引起缓冲区溢出，目前的问题时需要多长的字符串，以…","frontmatter":{"date":"2020-09-16","title":"栈溢出利用","tags":["随笔"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/d117136acea3a1946d7ab58de5f5c27a/gdb-debug.png"}}},{"id":"6477815e-af80-5de3-b4db-d4e963d23797","excerpt":"单线程异步 JavaScript是一门单线程异步的语言。这听起来似乎有点奇怪，只有一个 js 线程，为什么还能实现异步的功能。实际上，js 的异步操作的执行例如网络请求、定时器，并不是在 js 线程上执行，这些能力是由宿主环境提供的。例如在浏览器上有五大线程，GUI渲染引擎线程、JavaScrip…","frontmatter":{"date":"2020-09-08","title":"对JavaScript的异步机制的理解","tags":["JavaScript","随笔"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/510b66db092b99d9272de796d2cf0db1/runtime.jpeg"}}},{"id":"db4a5658-db73-57a5-9e20-7e346d080132","excerpt":"前言 我的主力开发语言是JavaScript，但是 js 对多线程的支持并不是特别好。在入门golang后，了解到了go协程和channel，想试一试多线程。go原生对并发很友好，我这里是希望尝试使用go协程优化大数组求和。 对比 进行对比的两个函数 func sum1(bigArray []in…","frontmatter":{"date":"2020-07-27","title":"使用go协程优化求和算法","tags":["go","随笔"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/b1cec0dafb23b4248a54b152b15a0c2f/goroutine-bench2.png"}}},{"id":"d05d4d5b-f2e0-5017-ae70-d150b6bfcf32","excerpt":"JavaScript 本身是没有类继承的，但是我们又可以使用 ES6 中的class关键字来写一个类，它的底层实现是原型链。原型链的介绍在MDN--原型链上的介绍已经很详细了，但我想分享一下我的理解，如果不正确的地方，欢迎指出。 什么是原型链 在 chrome 的 devtool 中，我们打印一个…","frontmatter":{"date":"2020-07-11","title":"原型链和this指向问题","tags":["javascript"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/a2590a405d91c5c4e4c48a6bfb71e324/prototype-chain1.png"}}},{"id":"83d58e1f-2f8a-5bdb-969a-d6b5c995b20a","excerpt":"前言 redux是一个JavaScript的状态容器，redux-saga是 redux 的一个中间件，react-redux是一个通过高阶函数的方式实现连接 redux 和 react 组件的库。redux有state,action,dispatch,reducer的概念。通过 dispatch…","frontmatter":{"date":"2020-06-13","title":"redux-saga初试","tags":["JavaScript","随笔"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/86867ca5c0286bf4b71ae808be1c1812/redux-saga.png"}}}]}},"pageContext":{}},"staticQueryHashes":["63159454"]}