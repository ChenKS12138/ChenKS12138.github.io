{"componentChunkName":"component---src-pages-index-tsx","path":"/","result":{"data":{"allMarkdownRemark":{"nodes":[{"id":"d731890a-1c15-597e-8039-c089713fc544","excerpt":"单线程异步 JavaScript是一门单线程异步的语言。这听起来似乎有点奇怪，只有一个 js 线程，为什么还能实现异步的功能。实际上，js 的异步操作的执行例如网络请求、定时器，并不是在 js 线程上执行，这些能力是由宿主环境提供的。例如在浏览器上有五大线程，GUI渲染引擎线程、JavaScrip…","frontmatter":{"date":"2020-09-08","title":"对JavaScript的异步机制的理解","tags":["JavaScript","随笔"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/77ddfc13f1c37f6709b881d794acb860/runtime.jpeg"}}},{"id":"673cc44a-d8a8-5a00-8658-30c14b7d5249","excerpt":"前言 我的主力开发语言是JavaScript，但是 js 对多线程的支持并不是特别好。在入门golang后，了解到了go协程和channel，想试一试多线程。go原生对并发很友好，我这里是希望尝试使用go协程优化大数组求和。 对比 进行对比的两个函数 func sum1(bigArray []in…","frontmatter":{"date":"2020-07-27","title":"使用go协程优化求和算法","tags":["go","随笔"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/c7f2e44fd5102ff585b12926e0f40906/goroutine-bench2.png"}}},{"id":"c883952d-96d4-5dba-90b0-3d098aebdfcc","excerpt":"JavaScript 本身是没有类继承的，但是我们又可以使用 ES6 中的class关键字来写一个类，它的底层实现是原型链。原型链的介绍在MDN--原型链上的介绍已经很详细了，但我想分享一下我的理解，如果不正确的地方，欢迎指出。 什么是原型链 在 chrome 的 devtool 中，我们打印一个…","frontmatter":{"date":"2020-07-11","title":"原型链和this指向问题","tags":["javascript"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/8e556e117bd57779816ecaaa3a9e56cd/prototype-chain1.png"}}},{"id":"f95f0915-23d6-5d95-997e-04e5d6a5f307","excerpt":"前言 redux是一个JavaScript的状态容器，redux-saga是 redux 的一个中间件，react-redux是一个通过高阶函数的方式实现连接 redux 和 react 组件的库。redux有state,action,dispatch,reducer的概念。通过 dispatch…","frontmatter":{"date":"2020-06-13","title":"redux-saga初试","tags":["JavaScript","随笔"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/f860bd1b76161ab4c3f39c95e4dd124e/redux-saga.png"}}},{"id":"bf226b86-7ce2-5925-8b8b-cadc09987f3b","excerpt":"前言 \n这是一个可以用来制作毕业照的微信小程序，主要使用的技术栈是Taro，React。开发总体上，主要的问题是集中在资源加载优化方面还有画布的处理上。 资源加载优化方面  在这个装饰页面，以前也有见过类似的场景，是在你头像真棒小程序里。通过点击底下的图片，来更换画布中的背景图。但是不同于上一个场…","frontmatter":{"date":"2020-06-09","title":"毕业照小程序开发复盘","tags":["Taro","JavaScript","小程序"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/343bac5aab5012e63a904fb4530bad42/31591692795.jpg"}}},{"id":"b208eadb-8169-5627-8a4f-988a0d6107c4","excerpt":"JavaScript 中的 BigInt 之前写 JavaScript 代码，有听说到Number.MAX_VALUE和Number.MAX_SAFE_INTEGER，但是一直没有做深入的理解，对Number.MAX_SAFE_INTEGER并不太了解。 遇到的问题 要从一个密码学实验代码说起，最…","frontmatter":{"date":"2020-04-11","title":"JavaScript中的BigInt","tags":["JavaScript"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/708789c1f56e28a74b45578906cc4024/Gbtt2R.png"}}},{"id":"39cca1ae-aa35-5cfe-a313-8845cb02fd64","excerpt":"前言 Node.js是作为一个前端开发者必备的技术栈。 正如官方中说的那样，Node.js是一个基于 Chrome V8 引擎的 JavaScript 运行时。 Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript eng…","frontmatter":{"date":"2020-01-14","title":"Node.js入门指北","tags":["JavaScript","Node.js"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/b61e706653f9fb0d93290f911cb33ab9/2.png"}}},{"id":"66c8219c-e2ab-5a14-9e0b-8d63ea26e26b","excerpt":"概述 主要是讲我对flutter 的初次尝试吧，写了个南邮图书馆 APP。感觉可以优化的地方还很多，第一次使用flutter 对widget 的使用还不太熟悉，布局写得不太好。先说说我的思路吧，一般来说，说到爬虫都会想到后端，web 前端因为有浏览器的同源限制，所以很难使用爬虫技术。但是在clie…","frontmatter":{"date":"2019-09-25","title":"初试flutter","tags":["Flutter","Dart","跨端技术"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/85db362342726afe28c0f0c505281c1f/flutter.jpg"}}},{"id":"499f687f-1fb8-570e-8333-e69e768bd27a","excerpt":"什么是函数节流和函数防抖 这两者都是 JavaScript 中的一些优化方法。顾名思义，节流与防抖都是通过一定的方法，较少函数的调用频率，来达到优化的目的。 函数防抖 (Debounce) 主要是实现，当一定的事件间隔内连续多次触发指定的事件后，事件处理函数不会立即执行。仅在最后一次触发的若干毫秒…","frontmatter":{"date":"2019-08-10","title":"JS中的函数节流与函数防抖","tags":["JavaScript"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/9af98e1b4f6da32def8bf2ea9dd85cd1/debounce1.jpg"}}},{"id":"45058fc3-592e-5141-8fdc-4b1bc95a3fcc","excerpt":"概述 肖申克的救赎，英文名为The Shawshank Redemption 。讲述的是一位年轻的银行家安迪·杜弗兰被指控杀害他的妻子与其情夫而入狱，本将在肖申克监狱中度过余生，但是在得知自己无罪后，越狱重获新生的故事。  安迪本来是一个年轻有为的银行家，但被判了无期徒刑进入了肖申克监狱。一开始，…","frontmatter":{"date":"2019-07-25","title":"肖申克的救赎","tags":["随笔","影评"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/0c0ef5e6f24b10283fa4a33eed5e3ef6/shawshank1.jpg"}}},{"id":"321a5700-020d-562a-99f2-41ce3ac0535a","excerpt":"什么是跨域 简单地来说就是域 A 下网页试图加载域 B 下的资源。一般来说，浏览器会阻止这类行为。这是浏览器的同源策略导致的。所谓同源，就是要求两个 URL 的协议，域名，端口全部相同。 跨域会有什么影响 AJAX 请求发不出去 DOM、JS 对象无法获取 Cookie、LocalStorage …","frontmatter":{"date":"2019-07-22","title":"跨域那些事","tags":["request"],"index_img":{"publicURL":"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/static/9cd833d9cc366dea05cc52468ffe2aa3/cross_site4.jpg"}}},{"id":"5ce8cc10-28be-5938-92bf-3d250fd050fc","excerpt":"一道题目 这是 ScriptOJ 上的一道题目 => 传送门\n记忆化斐波那契函数（Memoization）\n题目是这样的 斐波那契数列指的是类似于以下的数列： 1, 1, 2, 3, 5, 8, 13, ....\n也就是，第 n 个数由数列的前两个相加而来：f(n) = f(n - 1) + f(…","frontmatter":{"date":"2019-07-22","title":"JavaScript中的闭包","tags":["JavaScript"],"index_img":null}}]}},"pageContext":{}},"staticQueryHashes":["63159454"]}