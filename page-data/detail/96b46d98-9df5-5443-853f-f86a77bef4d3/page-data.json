{"componentChunkName":"component---src-pages-detail-tsx","path":"/detail/96b46d98-9df5-5443-853f-f86a77bef4d3","result":{"pageContext":{"html":"<h2>概述</h2>\n<p>主要是讲我对<code>flutter</code> 的初次尝试吧，写了个南邮图书馆 APP。感觉可以优化的地方还很多，第一次使用<code>flutter</code> 对<code>widget</code> 的使用还不太熟悉，布局写得不太好。先说说我的思路吧，一般来说，说到爬虫都会想到后端，web 前端因为有浏览器的同源限制，所以很难使用爬虫技术。但是在<code>client</code> 就没有<code>brower</code> 的同源限制了，我可以在<code>APP</code> 上使用爬虫技术。我在<code>GitHub</code>上看到了<a href=\"https://github.com/gaoliang/NJUPT-API\">/gaoliang/NJUPT-API</a> ，这个是学长用<code>Python</code> 封装的爬取南邮的一些信息系统接口库。我就参考了学长的代码，自己写了爬虫代码。 编辑器方面，我没有用<code>vs code</code> 而是用了<code>Android Studio</code> 毕竟是弄<code>Android</code> 开发。<del>小声 BB，jetbrain 家的编辑器都长一个样，高亮不怎么好看</del> 。初步了解<code>Dart</code> 语法后就开始写了。</p>\n<h2>用了<code>Dart</code></h2>\n<p>确实挺多人吐槽<code>JavaScript</code> 的弱类型，开发时灵活快捷时优点，但是也有缺点，不仅开发者不容易 debug，对 IDE 也不友好 IDE 不好做类型检查。<code>Dart</code> 是强类型面向对象单继承的编程语言，它的语法和<code>Java</code> 还有<code>JavaScript</code> 都很像。不过有点想吐槽它的包管理，添加依赖要手动改配置文件。 <del>估计是我 npm/yarn 用多了。</del> 目前<code>pub</code> 上的库还是挺少的，不过一些常用的还是有的。<code>dart</code> 也有一些有意思的地方。像<code>?.</code>、<code>??</code> 、<code>..</code> <del>目前只用过这三个</del> 。</p>\n<pre><code class=\"language-dart\">class Person {\n    String name;\n    String sex;\n    Person(this.name,this.sex);\n    void setName(String name){\n        this.name = name;\n    }\n    void setSex(String sex){\n        this.sex= sex;\n    }\n}\nvoid main(List&#x3C;String> args){\n    Person p = new Person('chen','male');\n    var a = p?.age;\n    var b = p.age ?? p.name;\n    p..setName('chen2')..setSex('male2');\n}\n</code></pre>\n<p><code>?.</code> 可以避免访问的对象为空的问题，<code>??</code> 如果第一个操作数为<code>null</code> 就会返回第二个的值。<code>..</code> 是联级操作符，可以使你在一个对象上连续操作，这样确实可以少写几个临时变量。</p>\n<h2>关于<code>flutter</code></h2>\n<p><code>flutter</code> 是<code>Google</code> 的一个跨平台应用框架。我用的是它的自带的<code>material</code> 组件库。使用上和<code>react</code> 有的地方有点像。每个<code>statefulWidget</code> 或<code>statelessWidget</code> 都有<code>build</code> 方法，这个和<code>react</code> 类组件中的<code>render</code> 有点像。<code>build</code> 方法会返回一个<code>widget</code> ，最终被渲染出来。<code>statefulWidget</code> 和<code>statelessWidget</code>的关系有点像<code>Component</code>和<code>PureComponent</code> ，组件是否有自己的状态。状态管理方面，我用的是<code>Provider</code> 诶，目前了解不多，就不做介绍了。</p>\n<p>使用<code>statefulWidget</code> 和 <code>statelessWidget</code></p>\n<pre><code class=\"language-dart\">import 'package:flutter/material.dart';\nclass Home extends statefulWidget{\n\n    @override\n    _Home createState() => _Home();\n}\nclass _Home extends State&#x3C;Home>{\n    String text;\n    @override\n    Widget build(BuildContext context){\n        return new Center(\n            child: Text(text)\n        );\n    }\n}\n\nclass Home2 extends statelessWidget{\n    @override\n    Widget build(BuildContext){\n        return new Center(\n            child:Text('home')\n        );\n    }\n}\n</code></pre>\n<p>使用<code>Component</code> 和<code>PureComponent</code></p>\n<pre><code class=\"language-jsx\">import React from \"react\";\nclass Home extends React.Component {\n  constructor() {\n    super();\n    this.text = \"home\";\n  }\n  render() {\n    return &#x3C;div>{text}&#x3C;/div>;\n  }\n}\nclass Home2 extends React.PureComponent {\n  constructor() {\n    super();\n    this.text = \"home\";\n  }\n}\n</code></pre>\n<p>更新中。。。</p>","id":"96b46d98-9df5-5443-853f-f86a77bef4d3","headings":[{"value":"概述","depth":2},{"value":"用了Dart","depth":2},{"value":"关于flutter","depth":2}],"date":"Wednesday, September 25, 2019 4:59 PM","tags":["Flutter","Dart","跨端技术"],"title":"初试flutter"}}}