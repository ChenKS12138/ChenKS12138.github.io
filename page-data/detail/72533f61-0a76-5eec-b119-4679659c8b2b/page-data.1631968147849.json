{"componentChunkName":"component---src-pages-detail-tsx","path":"/detail/72533f61-0a76-5eec-b119-4679659c8b2b","result":{"pageContext":{"html":"<h1>Stream 的概念</h1>\n<p>Steram 是 Nodejs 中比较重要的概念，它是对一些流动数据的处理过程的抽象。常见的像标准输入/输出流、文件、Socket、压缩过程都可以被抽象成 Nodejs 中的流。所有的流本质上都是 EventEmitter。</p>\n<blockquote>\n<p>A stream is an abstract interface for working with streaming data in Node.js. The stream module provides an API for implementing the stream interface.</p>\n<p>There are many stream objects provided by Node.js. For instance, a request to an HTTP server and process.stdout are both stream instances.</p>\n<p>Streams can be readable, writable, or both. All streams are instances of EventEmitter.</p>\n</blockquote>\n<p>常见的流有 Writable，Readable，Duplex，Transform 等<sup><a href=\"#reference-1\">[1]</a></sup>。Readable 可以理解为是生产者，提供一个 read 方法，处在一个 pipeline 的上游，Writeable 可以理解为消费者，提供一个 write 方法，处在一个 pipeline 的下游，Duplex 兼具 read 和 write 方法，Transform 和 Duplex 很类似，区别在于 Transform 的数据的流入和流出有比较强的关系，可以用于压缩等场景。</p>\n<h1>基于 TCP 白板应用</h1>\n<p>这是一个基于 TCP 通信的电子白板 Electron 应用，多个应用实例启动，其中一个实例作为 TCP 服务端，其他实例加入。服务端实例可以向自身的信息，每个客户端实例可以接受服务端的信息并同步到自己的画布上，又或者是将自己的信息透过服务端实例广播给其他客户端实例。当服务端实例监听到有新的客户端实例中途加入时，会将自身的画布信息同步给它。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/ChenKS12138/ChenKS12138.github.io/954cb67c05d23f33413f463105fcdb52/example.gif\" alt=\"example\"></p>\n<p>这个画布功能的实现主要是通过监听鼠标在 canvas 上的操作，获取和修改 canvas 的 imageData 实现的。使用 ipc 通信，将数据传递给 main process。再经过节流、差异比对、数据压缩、将数据块大小编码至数据块前部这样一些操作后，再广播给其他实例。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">/**\n * Server Instance\n */</span>\n\n<span class=\"token comment\">// Pipe Msg, Server -> Client</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmitterEventStream</span><span class=\"token punctuation\">(</span>ipcMain<span class=\"token punctuation\">,</span> events<span class=\"token punctuation\">.</span><span class=\"token constant\">SERVER_BROADCAST_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThrottleStream</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenerateDiffStream</span><span class=\"token punctuation\">(</span>bitmapBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompressStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">SizePrefixedChunkEncodeStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  broadcastStream<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Pipe Msg, Client -> Server</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span>\n  broadcastStream<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">SizePrefixedChunkDecodeStream</span><span class=\"token punctuation\">(</span><span class=\"token number\">960000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">DecompressStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplyDiffStream</span><span class=\"token punctuation\">(</span>bitmapBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebContentsEventStream</span><span class=\"token punctuation\">(</span>\n    mainWindow<span class=\"token punctuation\">.</span>webContents<span class=\"token punctuation\">,</span>\n    events<span class=\"token punctuation\">.</span><span class=\"token constant\">SERVER_ON_RECERIVED_BROADCAST_MESSAGE</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Client Instance\n */</span>\n\n<span class=\"token comment\">// Pipe Msg, Server -> Client</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span>\n  connection<span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">SizePrefixedChunkDecodeStream</span><span class=\"token punctuation\">(</span><span class=\"token number\">960000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">DecompressStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApplyDiffStream</span><span class=\"token punctuation\">(</span>bitmapBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebContentsEventStream</span><span class=\"token punctuation\">(</span>\n    mainWindow<span class=\"token punctuation\">.</span>webContents<span class=\"token punctuation\">,</span>\n    events<span class=\"token punctuation\">.</span><span class=\"token constant\">CLIENT_ON_RECEIVED_BROADCAST_MESSAGE</span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Pipe Msg, Client -> Server</span>\nstream<span class=\"token punctuation\">.</span><span class=\"token function\">pipeline</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">EmitterEventStream</span><span class=\"token punctuation\">(</span>ipcMain<span class=\"token punctuation\">,</span> events<span class=\"token punctuation\">.</span><span class=\"token constant\">CLIENT_BROADCAST_MESSAGE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThrottleStream</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">GenerateDiffStream</span><span class=\"token punctuation\">(</span>bitmapBuffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">CompressStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">new</span> <span class=\"token class-name\">SizePrefixedChunkEncodeStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  connection<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>TCP 是面向流的协议<sup><a href=\"#reference-1\">[2]</a></sup>，发送一个 chunk 后，chunk 可能会被拆分。接收端需要一个长度信息，将 chunk 重新组合。我通过<code>SizePrefixedChunkEncodeStream</code>和<code>SizePrefixedChunkDecodeStream</code>实现了这一个功能。</p>\n<p>通过数据的简单观察发现，在使用<code>zlib.deflate</code>和<code>zlib.inflate</code>压缩 600x400x4 字节的 chunk 时，chunk 的 0x00 的字节越多，压缩效果越明显。所以我使用了计算/应用 diff 的流、压缩/解压缩的流。</p>\n<h2>参考引用</h2>\n<ul>\n<li>[1] <a href=\"https://www.barretlee.com/blog/2017/06/06/dive-to-nodejs-at-stream-module/\">https://www.barretlee.com/blog/2017/06/06/dive-to-nodejs-at-stream-module/</a></li>\n<li>[2] <a href=\"https://stackoverflow.com/questions/17446491/tcp-stream-vs-udp-message\">https://stackoverflow.com/questions/17446491/tcp-stream-vs-udp-message</a></li>\n</ul>","id":"72533f61-0a76-5eec-b119-4679659c8b2b","headings":[{"value":"Stream 的概念","depth":1},{"value":"基于 TCP 白板应用","depth":1},{"value":"参考引用","depth":2}],"date":"Tuesday, May 4, 2021 5:36 PM","tags":["随笔"],"title":"使用Stream编写Electron应用"}},"staticQueryHashes":["63159454"]}