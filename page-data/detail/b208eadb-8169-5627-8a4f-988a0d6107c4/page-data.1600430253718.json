{"componentChunkName":"component---src-pages-detail-tsx","path":"/detail/b208eadb-8169-5627-8a4f-988a0d6107c4","result":{"pageContext":{"html":"<h2>JavaScript 中的 BigInt</h2>\n<p>之前写 JavaScript 代码，有听说到<code>Number.MAX_VALUE</code>和<code>Number.MAX_SAFE_INTEGER</code>，但是一直没有做深入的理解，对<code>Number.MAX_SAFE_INTEGER</code>并不太了解。</p>\n<h3>遇到的问题</h3>\n<p>要从一个密码学实验代码说起，最近在用 JavaScript 实现 RSA 算法，遇到了一个问题。RSA 算法是基于大质数乘积的因式分解困难的难题实现的。</p>\n<p>其中，生成密钥对的大致步骤如下：</p>\n<ol>\n<li>随机生成两个大质数 p,q;</li>\n<li>计算 n=p*q;</li>\n<li>计算 m=(p-1)*(q-1);</li>\n<li>计算数值 e，e 为一个与 m 互质的数</li>\n<li>计算数值 d，d 为满足<code>(d*e) ≡ 1 mod m</code> 的数</li>\n</ol>\n<p>在生成<code>d</code>时遇到了一个问题，<code>generateD()</code>生成的<code>d</code>不符合我的预期，但是计算步骤是没问题的。</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">const generateD = (e, m) =&gt; {\n  let k = 1;\n  while (true) {\n    if ((k * m + 1) % e === 0) {\n      return (k * m + 1) / e;\n    }\n    k++;\n  }\n};</code>\n        </deckgo-highlight-code>\n<p>排查发现当 k=<code>5</code>,m=<code>9999999999999999</code>,e=<code>10</code>时，if 的条件语句为真，但是从数学的角度来说，此时<code>(k*m+1)%e</code>显然是 6。</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">console.log((5 * 9999999999999999 + 1) % 10);\n// 结果为0</code>\n        </deckgo-highlight-code>\n<p>怀疑是数值太大的原因改用 BigInt，才解决了问题。</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">console.log((5n * 9999999999999999n + 1n) % 10n);\n// 结果为6n</code>\n        </deckgo-highlight-code>\n<p>重新修改<code>generateD</code>函数</p>\n<deckgo-highlight-code language=\"javascript\"  >\n          <code slot=\"code\">const generateD = (e, m) =&gt; {\n  let k = 1n;\n  e = BigInt(e);\n  m = BigInt(m);\n  while (true) {\n    if ((k * m + 1n) % e === 0n) {\n      return parseInt((k * m + 1n) / e);\n    }\n    k++;\n  }\n};</code>\n        </deckgo-highlight-code>\n<h3>原因分析</h3>\n<p>原因在于 JavaScript 中的<code>Number</code>无论是整数还是小数都是使用 IEEE754 的双精度浮点数表示的。</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/GbPPij.png\" alt=\"双精度浮点数\"></p>\n<p>双精度浮点数的表示类似与科学计数法<code>(-1)^S*(1.M)*2^(E-1023)</code></p>\n<p>由符号位（d63），指数部分（d62-d52），尾数部分（d51-d0）组成。符号位决定了这个浮点数的正负，指数部分决定了这个数的表示范围，尾数部分决定了这个数的表示精度。如果尾数部分太长，那么多余的部分只能舍去，此时浮点数的精度就降低了。</p>\n<p><img src=\"https://s1.ax1x.com/2020/04/11/Gbtt2R.png\" alt=\"Float Point Converter\"></p>\n<p>因此有了<code>Number.MAX_SAFE_INTEGER</code>。它的值为<code>9007199254740991</code><a href=\"#refer-1\"><sup>1</sup></a>， 当数值超过<code>Number.MAX_SAFE_INTEGER</code>时，就不能保证数值的精度了。可以调用<code>Number.isSafeInteger</code>进行判断。</p>\n<blockquote>\n<p>Number.MAX<em>SAFE</em>VALUE<a href=\"#refer-2\"><sup>[2]</sup></a> : The value of <code>Number.MAX_SAFE_INTEGER</code> is the largest integer n such that n and n + 1 are both exactly representable as a Number value.</p>\n</blockquote>\n<h3>BigInt</h3>\n<p>我们可以用 BigInt 来表示任意大的整数，但也有需要注意的地方</p>\n<ol>\n<li>不可以和 Number 实例混用</li>\n<li>不能用于 Math 对象中的方法</li>\n<li>使用 BigInt 运算时，带小数的结果会被取整</li>\n<li>在 JSON 中使用时，需要自己实现<code>BigInt.prototype.toJSON</code></li>\n<li>因为对 BigInt 的操作并不是常数时间，因此 BigInt 不适合用于密码学<a href=\"#refer-3\"><sup>[3]</sup></a></li>\n</ol>\n<h3>参考引用</h3>\n<ul>\n<li>[1] <a href=\"https://www.binaryconvert.com/result_double.html?decimal=057048048055049057057050053052055052048057057049\">https://www.binaryconvert.com/result_double.html?decimal=057048048055049057057050053052055052048057057049</a></li>\n<li>[2] <a href=\"https://www.ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer/\">https://www.ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer/</a></li>\n<li>[3] <a href=\"https://www.chosenplaintext.ca/articles/beginners-guide-constant-time-cryptography.html\">https://www.chosenplaintext.ca/articles/beginners-guide-constant-time-cryptography.html</a></li>\n</ul>","id":"b208eadb-8169-5627-8a4f-988a0d6107c4","headings":[{"value":"JavaScript 中的 BigInt","depth":2},{"value":"遇到的问题","depth":3},{"value":"原因分析","depth":3},{"value":"BigInt","depth":3},{"value":"参考引用","depth":3}],"date":"Saturday, April 11, 2020 6:55 PM","tags":["JavaScript"],"title":"JavaScript中的BigInt"}},"staticQueryHashes":["63159454"]}