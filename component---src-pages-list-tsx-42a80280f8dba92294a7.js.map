{"version":3,"sources":["webpack:///./src/pages/list.tsx"],"names":["List","props","data","useState","currentTag","setCurrentTag","totalCount","allMarkdownRemark","nodes","tags","useMemo","Array","from","Set","reduce","prev","current","concat","frontmatter","groups","prevGroup","date","title","id","split","year","MMDD","targetGroup","find","x","currentNode","includes","push","backgroundSrc","appConfig","headerImages","archives","height","content","className","map","tag","key","onClick","group","node","navigate","query"],"mappings":"qTAwHeA,UAlGf,SAAcC,GAAkB,IACtBC,EAASD,EAATC,KADsB,EAEMC,mBAJtB,OAIPC,EAFuB,KAEXC,EAFW,KAIxBC,EAAsBJ,EAAaK,kBAAkBD,WACrDE,EAA6BN,EAAaK,kBAAkBC,MAE5DC,EAAOC,mBACX,kBACEC,MAAMC,KACJ,IAAIC,IACFL,EAAMM,QACJ,SAACC,EAAMC,GAAP,OAAmBD,EAAKE,OAAOD,EAAQE,YAAYT,QACnD,CAfI,YAmBZ,CAACD,IAGGW,EAASX,EAAMM,QAAO,SAACM,EAAWJ,GAAY,MAI9CA,EAFFE,YAAeG,EAFiC,EAEjCA,KAAMC,EAF2B,EAE3BA,MAAOb,EAFoB,EAEpBA,KAC5Bc,EACEP,EADFO,GAHgD,EAK7BF,EAAKG,MAAM,KAAzBC,EAL2C,KAKrCC,EALqC,KAM5CC,EAAcP,EAAUQ,MAAK,SAAAC,GAAC,OAAIA,EAAEJ,OAASA,KAC7CK,EAAc,CAAEJ,OAAMJ,QAAOb,OAAMc,MAEzC,MA/BY,QA+BRnB,GAA2BK,EAAKsB,SAAS3B,IAEzCuB,EACFA,EAAYnB,MAAMwB,KAAKF,GAEvBV,EAAUY,KAAK,CACbP,OACAjB,MAAO,CAACsB,KAGLV,GAV0DA,IAWhE,IAEH,OACE,kBAAC,IAAD,CACEa,cAAeC,IAAUC,aAAaC,SACtCC,OAAO,QACPC,QAAS,yBAAKC,UAAU,uBAAf,WACTjB,MAAM,YAEN,yBAAKiB,UAAU,kBACb,yBAAKA,UAAU,kBACZ9B,EAAK+B,KAAI,SAAAC,GAAG,OACX,yBACEF,UAAS,QAASE,IAAQrC,EAAa,eAAiB,IACxDsC,IAAKD,EACLE,QAAS,kBAAMtC,EAAcoC,KAE5BA,OA3DC,QA+DPrC,GACC,yBAAKmC,UAAU,yBAAf,SAA8CjC,GAEhD,yBAAKiC,UAAU,mBACZpB,EAAOqB,KACN,SAACI,GAAD,OASE,yBAAKL,UAAU,QAAQG,IAAKE,EAAMnB,MAChC,yBAAKc,UAAU,cAAcK,EAAMnB,MACnC,yBAAKc,UAAU,yBACZK,EAAMpC,MAAMgC,KAAI,SAAAK,GAAI,OACnB,yBACEN,UAAU,OACVI,QAAS,kBAAMG,mBAAS,WAAWD,EAAKtB,KACxCmB,IAAKG,EAAKtB,IAEV,yBAAKgB,UAAU,cAAcM,EAAKvB,OAClC,yBAAKiB,UAAU,aAAaM,EAAKnB,mBAehD,IAAMqB,EAAQ,c","file":"component---src-pages-list-tsx-42a80280f8dba92294a7.js","sourcesContent":["import React, { useMemo, useState } from \"react\";\nimport { PageProps, graphql, navigateTo, navigate } from \"gatsby\";\n\nimport Layout from \"@/layout/default/Layout\";\n\nimport appConfig from \"@/app.config\";\n\nimport \"./list.less\";\n\ninterface FrontMatter {\n  date: string;\n  tags: Array<string>;\n  title: string;\n}\n\ninterface ArchiveItem {\n  frontmatter: FrontMatter;\n  id: string;\n}\n\nconst TAG_ALL = \"ALL\";\n\nfunction List(props: PageProps) {\n  const { data } = props;\n  const [currentTag, setCurrentTag] = useState(TAG_ALL);\n\n  const totalCount: number = (data as any).allMarkdownRemark.totalCount;\n  const nodes: Array<ArchiveItem> = (data as any).allMarkdownRemark.nodes;\n\n  const tags = useMemo(\n    () =>\n      Array.from(\n        new Set(\n          nodes.reduce(\n            (prev, current) => prev.concat(current.frontmatter.tags),\n            [TAG_ALL]\n          )\n        )\n      ),\n    [nodes]\n  );\n\n  const groups = nodes.reduce((prevGroup, current) => {\n    const {\n      frontmatter: { date, title, tags },\n      id,\n    } = current;\n    const [year, MMDD] = date.split(\" \");\n    const targetGroup = prevGroup.find(x => x.year === year);\n    const currentNode = { MMDD, title, tags, id };\n\n    if (currentTag !== TAG_ALL && !tags.includes(currentTag)) return prevGroup;\n\n    if (targetGroup) {\n      targetGroup.nodes.push(currentNode);\n    } else {\n      prevGroup.push({\n        year,\n        nodes: [currentNode],\n      });\n    }\n    return prevGroup;\n  }, []);\n\n  return (\n    <Layout\n      backgroundSrc={appConfig.headerImages.archives}\n      height=\"500px\"\n      content={<div className=\"list-header-content\">Archive</div>}\n      title=\"Archives\"\n    >\n      <div className=\"list-container\">\n        <div className=\"tags-container\">\n          {tags.map(tag => (\n            <div\n              className={`tag ${tag === currentTag ? \"tag-selected\" : \"\"}`}\n              key={tag}\n              onClick={() => setCurrentTag(tag)}\n            >\n              {tag}\n            </div>\n          ))}\n        </div>\n        {currentTag === TAG_ALL && (\n          <div className=\"total-count-container\">Total:{totalCount}</div>\n        )}\n        <div className=\"group-container\">\n          {groups.map(\n            (group: {\n              year: string;\n              nodes: Array<{\n                id: string;\n                title: string;\n                tags: Array<string>;\n                MMDD: string;\n              }>;\n            }) => (\n              <div className=\"group\" key={group.year}>\n                <div className=\"group-year\">{group.year}</div>\n                <div className=\"group-nodes-container\">\n                  {group.nodes.map(node => (\n                    <div\n                      className=\"node\"\n                      onClick={() => navigate(`/detail/${node.id}`)}\n                      key={node.id}\n                    >\n                      <div className=\"node-title\">{node.title}</div>\n                      <div className=\"node-date\">{node.MMDD}</div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )\n          )}\n        </div>\n      </div>\n    </Layout>\n  );\n}\n\nexport default List;\n\nexport const query = graphql`\n  {\n    allMarkdownRemark {\n      totalCount\n      nodes {\n        id\n        frontmatter {\n          date(formatString: \"YYYY MM-DD\")\n          tags\n          title\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}